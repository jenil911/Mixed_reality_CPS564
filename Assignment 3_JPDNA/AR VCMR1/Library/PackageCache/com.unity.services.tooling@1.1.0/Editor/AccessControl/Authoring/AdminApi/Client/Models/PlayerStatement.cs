//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Tooling.Editor.AccessControl.Authoring.Client.Http;



namespace Unity.Services.Tooling.Editor.AccessControl.Authoring.Client.Models
{
    /// <summary>
    /// A Statement is a single set of rules for accessing a resource
    /// </summary>
    [Preserve]
    [DataContract(Name = "PlayerStatement")]
    internal class PlayerStatement
    {
        /// <summary>
        /// A Statement is a single set of rules for accessing a resource
        /// </summary>
        /// <param name="sid">Statement ID. Consists of alphanumeric characters and hyphen, and must be of length between 6 and 60 chars.</param>
        /// <param name="action">User action against which the policy statement will be applicable. Allowable values are \&quot;Read\&quot;, \&quot;Write\&quot;, \&quot;*\&quot;, \&quot;Vivox:JoinMuted\&quot;, \&quot;Vivox:JoinAllMuted\&quot;, \&quot;Vivox:JoinWithConsent\&quot;.</param>
        /// <param name="effect">Effect of the policy statement. Allowable values are \&quot;Allow\&quot; and \&quot;Deny\&quot;</param>
        /// <param name="principal">The principal the statement applies to, Allowed value is \&quot;Player\&quot;</param>
        /// <param name="resource">Uniform resource name of the resource(s) being targeted by the policy. The format is &#x60;urn:ugs:&lt;service-name&gt;:/&lt;path&gt;&#x60;. For example, &#x60;urn:ugs:*&#x60; targets all services. Some other examples are &lt;ul&gt;&lt;li&gt;&#x60;urn:ugs:cloud-code:/v1/projects/_*_/scripts/_*&#x60;&lt;/li&gt; &lt;li&gt;&#x60;urn:ugs:economy:/_*&#x60;&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="expiresAt">UTC time (ISO 8601 extended format) when the policy expires</param>
        /// <param name="version">version param</param>
        [Preserve]
        public PlayerStatement(string sid, List<string> action, string effect, string principal, string resource, DateTime expiresAt = default, string version = default)
        {
            Sid = sid;
            Action = action;
            Effect = effect;
            Principal = principal;
            Resource = resource;
            ExpiresAt = expiresAt;
            Version = version;
        }

        /// <summary>
        /// Statement ID. Consists of alphanumeric characters and hyphen, and must be of length between 6 and 60 chars.
        /// </summary>
        [Preserve]
        [DataMember(Name = "Sid", IsRequired = true, EmitDefaultValue = true)]
        public string Sid{ get; }
        
        /// <summary>
        /// User action against which the policy statement will be applicable. Allowable values are \&quot;Read\&quot;, \&quot;Write\&quot;, \&quot;*\&quot;, \&quot;Vivox:JoinMuted\&quot;, \&quot;Vivox:JoinAllMuted\&quot;, \&quot;Vivox:JoinWithConsent\&quot;.
        /// </summary>
        [Preserve]
        [DataMember(Name = "Action", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Action{ get; }
        
        /// <summary>
        /// Effect of the policy statement. Allowable values are \&quot;Allow\&quot; and \&quot;Deny\&quot;
        /// </summary>
        [Preserve]
        [DataMember(Name = "Effect", IsRequired = true, EmitDefaultValue = true)]
        public string Effect{ get; }
        
        /// <summary>
        /// The principal the statement applies to, Allowed value is \&quot;Player\&quot;
        /// </summary>
        [Preserve]
        [DataMember(Name = "Principal", IsRequired = true, EmitDefaultValue = true)]
        public string Principal{ get; }
        
        /// <summary>
        /// Uniform resource name of the resource(s) being targeted by the policy. The format is &#x60;urn:ugs:&lt;service-name&gt;:/&lt;path&gt;&#x60;. For example, &#x60;urn:ugs:*&#x60; targets all services. Some other examples are &lt;ul&gt;&lt;li&gt;&#x60;urn:ugs:cloud-code:/v1/projects/_*_/scripts/_*&#x60;&lt;/li&gt; &lt;li&gt;&#x60;urn:ugs:economy:/_*&#x60;&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Preserve]
        [DataMember(Name = "Resource", IsRequired = true, EmitDefaultValue = true)]
        public string Resource{ get; }
        
        /// <summary>
        /// UTC time (ISO 8601 extended format) when the policy expires
        /// </summary>
        [Preserve]
        [DataMember(Name = "ExpiresAt", EmitDefaultValue = false)]
        public DateTime ExpiresAt{ get; }
        
        /// <summary>
        /// Parameter Version of PlayerStatement
        /// </summary>
        [Preserve]
        [DataMember(Name = "Version", EmitDefaultValue = false)]
        public string Version{ get; }
    
        /// <summary>
        /// Formats a PlayerStatement into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Sid != null)
            {
                serializedModel += "Sid," + Sid + ",";
            }
            if (Action != null)
            {
                serializedModel += "Action," + Action.ToString() + ",";
            }
            if (Effect != null)
            {
                serializedModel += "Effect," + Effect + ",";
            }
            if (Principal != null)
            {
                serializedModel += "Principal," + Principal + ",";
            }
            if (Resource != null)
            {
                serializedModel += "Resource," + Resource + ",";
            }
            if (ExpiresAt != null)
            {
                serializedModel += "ExpiresAt," + ExpiresAt.ToString() + ",";
            }
            if (Version != null)
            {
                serializedModel += "Version," + Version;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a PlayerStatement as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Sid != null)
            {
                var SidStringValue = Sid.ToString();
                dictionary.Add("Sid", SidStringValue);
            }
            
            if (Action != null)
            {
                var ActionStringValue = Action.ToString();
                dictionary.Add("Action", ActionStringValue);
            }
            
            if (Effect != null)
            {
                var EffectStringValue = Effect.ToString();
                dictionary.Add("Effect", EffectStringValue);
            }
            
            if (Principal != null)
            {
                var PrincipalStringValue = Principal.ToString();
                dictionary.Add("Principal", PrincipalStringValue);
            }
            
            if (Resource != null)
            {
                var ResourceStringValue = Resource.ToString();
                dictionary.Add("Resource", ResourceStringValue);
            }
            
            if (ExpiresAt != null)
            {
                var ExpiresAtStringValue = ExpiresAt.ToString();
                dictionary.Add("ExpiresAt", ExpiresAtStringValue);
            }
            
            if (Version != null)
            {
                var VersionStringValue = Version.ToString();
                dictionary.Add("Version", VersionStringValue);
            }
            
            return dictionary;
        }
    }
}
